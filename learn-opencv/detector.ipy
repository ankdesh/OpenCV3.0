import cv2
get_ipython().magic(u'logstart detectoy.ipy append')
import cv2
import numpy as np
img = cv2.imread('checker.png')
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
gray = np.float32(gray)
dst = cv2.cornerHarris(gray,2,3,0.04)
print dst
img[dst> 0.01]
img[dst> 0.01 * dst.max()]
img[dst> 0.01 * dst.max()].shape
img[dst> 0.01 * dst.max()]
#result is dilated for marking the corners, not important
dst = cv2.dilate(dst,None)
# Threshold for an optimal value, it may vary depending on the image.
img[dst>0.01*dst.max()]=[0,0,255]
cv2.imshow('dst',img)
if cv2.waitKey(0) & 0xff == 27:
        cv2.destroyAllWindows()
    
dst = cv2.cornerHarris(gray,2,3,0.04)
cv2.imshow('dst',img)
if cv2.waitKey(0) & 0xff == 27:
        cv2.destroyAllWindows()
    
cv2.imshow('dst',img)
cv2.imshow('dst',img)
cv2.destroyAllWindows()
corners = cv2.goodFeaturesToTrack(gray,25,0.01,10)
corners = np.int0(corners)
for i in corners:
        x,y = i.ravel()
        cv2.circle(img,(x,y),3,255,-1)
    
plt.imshow(img),plt.show()
import matplotlib
import numpy as np
import cv2
from matplotlib import pyplot as plt
get_ipython().magic(u'logstart detectoy.ipy append')
import numpy as np
import cv2
from matplotlib import pyplot as plt
img = cv2.imread('checker.png')
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
corners = cv2.goodFeaturesToTrack(gray,25,0.01,10)
corners = np.int0(corners)
plt.imshow(img),plt.show()
print corners
for i in corners:
        x,y = i.ravel()
        cv2.circle(img,(x,y),3,255,-1)
    
plt.imshow(img),plt.show()
for i in corners:
        x,y = i.ravel()
        cv2.circle(img,(x,y),10,255,-1)
    
plt.imshow(img),plt.show()
img = cv2.imread('checker.png')
gray= cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
sift = cv2.SIFT()
cv2.FastFeatureDetector()
